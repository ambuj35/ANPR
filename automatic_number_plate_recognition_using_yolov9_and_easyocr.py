# -*- coding: utf-8 -*-
"""Automatic Number Plate Recognition using Yolov9 and EasyOCR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RV39tIf6FrX7DinFfRKguvAW-pHHJc9d
"""

!nvidia-smi

import os
HOME = os.getcwd()
print(HOME)

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/SkalskiP/yolov9.git
# %cd yolov9
!pip install -r requirements.txt -q

!pip install -q roboflow

!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-c.pt
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-e.pt
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/gelan-c.pt
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/gelan-e.pt

!ls -la {HOME}/weights

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}/yolov9

import roboflow

roboflow.login()

rf = roboflow.Roboflow()

project = rf.workspace("arvind-kumar-wjygd").project("anpr2-syxl7")
version = project.version(8)
dataset = version.download("yolov9")

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}/yolov9
!python train.py \
--batch 16 --epochs 25 --img 640 --device 0 \
--data {dataset.location}/data.yaml \
--weights {HOME}/weights/gelan-c.pt \
--cfg models/detect/gelan-c.yaml \
--hyp hyp.scratch-high.yaml \
--project {HOME}/yolov9/runs/train/ \
--name exp_with_logs

!ls {HOME}/yolov9/runs/train/exp_with_logs/

import os
import glob
from IPython.display import Image, display  # Import Image and display

HOME = "/content"  # or your specified path
exp_dirs = sorted(glob.glob(f"{HOME}/yolov9/runs/train/exp_with_logs*"), key=os.path.getmtime)

for exp_dir in exp_dirs:
    print(f"Checking {exp_dir}...")
    if os.path.isfile(os.path.join(exp_dir, "results.png")):
        print(f"Found results.png in {exp_dir}")
        display(Image(filename=os.path.join(exp_dir, "results.png"), width=1000))
        break
else:
    print("results.png not found in any experiment folder.")

import os

HOME = "/content"  # or your specified path
for folder in os.listdir(f"{HOME}/yolov9/runs/train"):
    print(folder)

import glob

confusion_matrix_paths = glob.glob(f"{HOME}/yolov9/runs/train/exp*/confusion_matrix.png")
if confusion_matrix_paths:
    for path in confusion_matrix_paths:
        print(f"Found confusion_matrix.png at: {path}")
        display(Image(filename=path, width=1000))
else:
    print("confusion_matrix.png not found in any experiment folder.")

import os

HOME = "/content"  # or your specified path
exp_folder = f"{HOME}/yolov9/runs/train/exp_with_logs2"

# List all files in the specified folder
if os.path.exists(exp_folder):
    print("Files in exp_with-logs2:")
    print(os.listdir(exp_folder))
else:
    print("exp2 folder does not exist.")

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}/yolov9

!python train.py \
--batch 16 --epochs 25 --img 640 --device 0 \
--data {dataset.location}/data.yaml \
--weights {HOME}/weights/gelan-c.pt \
--cfg models/detect/gelan-c.yaml \
--hyp hyp.scratch-high.yaml \
--project {HOME}/yolov9/runs/train/ \
--name custom_exp_name  # or another appropriate name

import os
from IPython.display import Image, display

# Define the path to your images directory
images_path = f"{HOME}/content/yolov9/ANPR2-8/valid/images"

# Specify the image file you want to display
image_file = 'download_jpeg.rf.d07c4fafa40947367f42eb003673dfd3.jpg'  # Use the exact name from the printed list
image_path = os.path.join(images_path, image_file)

# Check the directory and file
if os.path.exists(images_path):
    print("Directory exists:", images_path)
    print("Images in the directory:")
    for img in os.listdir(images_path):
        print(f" - {img}")

    # Display the image if it exists
    print("Attempting to access image at path:", image_path)
    if os.path.exists(image_path):
        display(Image(filename=image_path, width=1000))
    else:
        print(f"The image file {image_file} does not exist at the path: {image_path}")
else:
    print("The specified directory does not exist.")

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}/yolov9

!python val.py \
--img 640 --batch 32 --conf 0.001 --iou 0.7 --device 0 \
--data {dataset.location}/data.yaml \
--weights {HOME}/yolov9/runs/train/exp_with_logs2/weights/best.pt

!python detect.py \
--img 1280 --conf 0.1 --device 0 \
--weights {HOME}/yolov9/runs/train/exp_with_logs2/weights/best.pt \
--source {dataset.location}/test/images

import glob

from IPython.display import Image, display

for image_path in glob.glob(f'{HOME}/yolov9/runs/detect/exp2/*.jpg')[:2]:
      display(Image(filename=image_path, width=600))

!ls {HOME}/yolov9/

# video

!python detect.py --conf 0.1 --device 0 --weights {HOME}/yolov9/runs/train/exp_with_logs2/weights/best.pt --source car.mp4

!pip install easyocr

!python anpr.py --conf 0.1 --device 0 --weights {HOME}/yolov9/runs/train/exp_with_logs2/weights/best.pt --source car.mp4